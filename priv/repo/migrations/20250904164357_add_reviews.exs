defmodule Stackd.Repo.Migrations.AddReviews do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:tv_show_reviews, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :content, :text, null: false
      add :rating, :bigint
      add :spoiler, :boolean, null: false, default: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "tv_show_reviews_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :tv_show_id,
          references(:tv_shows,
            column: :id,
            name: "tv_show_reviews_tv_show_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :tv_show_log_id,
          references(:tv_show_logs,
            column: :id,
            name: "tv_show_reviews_tv_show_log_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )
    end

    create index(:tv_show_reviews, [:user_id, :tv_show_id],
             unique: true,
             where: "tv_show_log_id IS NULL"
           )

    create table(:movie_reviews, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :content, :text, null: false
      add :rating, :bigint
      add :spoiler, :boolean, null: false, default: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "movie_reviews_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :movie_id,
          references(:movies,
            column: :id,
            name: "movie_reviews_movie_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :movie_log_id,
          references(:movie_logs,
            column: :id,
            name: "movie_reviews_movie_log_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )
    end

    create index(:movie_reviews, [:user_id, :movie_id],
             unique: true,
             where: "movie_log_id IS NULL"
           )

    create table(:game_reviews, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :content, :text, null: false
      add :rating, :bigint
      add :spoiler, :boolean, null: false, default: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "game_reviews_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :game_id,
          references(:games,
            column: :id,
            name: "game_reviews_game_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :game_log_id,
          references(:game_logs,
            column: :id,
            name: "game_reviews_game_log_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )
    end

    create index(:game_reviews, [:user_id, :game_id], unique: true, where: "game_log_id IS NULL")

    create table(:album_reviews, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :content, :text, null: false
      add :rating, :bigint
      add :spoiler, :boolean, null: false, default: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "album_reviews_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :album_id,
          references(:albums,
            column: :id,
            name: "album_reviews_album_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :album_log_id,
          references(:album_logs,
            column: :id,
            name: "album_reviews_album_log_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          )
    end

    create index(:album_reviews, [:user_id, :album_id],
             unique: true,
             where: "album_log_id IS NULL"
           )

    create constraint(:album_reviews, :content_not_empty,
             check: """
               length(trim(content)) > 0
             """
           )

    create constraint(:game_reviews, :content_not_empty,
             check: """
               length(trim(content)) > 0
             """
           )

    create constraint(:movie_reviews, :content_not_empty,
             check: """
               length(trim(content)) > 0
             """
           )

    create constraint(:tv_show_reviews, :content_not_empty,
             check: """
               length(trim(content)) > 0
             """
           )
  end

  def down do
    drop_if_exists constraint(:tv_show_reviews, :content_not_empty)

    drop_if_exists constraint(:movie_reviews, :content_not_empty)

    drop_if_exists constraint(:game_reviews, :content_not_empty)

    drop_if_exists constraint(:album_reviews, :content_not_empty)

    drop constraint(:album_reviews, "album_reviews_user_id_fkey")

    drop constraint(:album_reviews, "album_reviews_album_id_fkey")

    drop constraint(:album_reviews, "album_reviews_album_log_id_fkey")

    drop_if_exists index(:album_reviews, [:user_id, :album_id])

    drop table(:album_reviews)

    drop constraint(:game_reviews, "game_reviews_user_id_fkey")

    drop constraint(:game_reviews, "game_reviews_game_id_fkey")

    drop constraint(:game_reviews, "game_reviews_game_log_id_fkey")

    drop_if_exists index(:game_reviews, [:user_id, :game_id])

    drop table(:game_reviews)

    drop constraint(:movie_reviews, "movie_reviews_user_id_fkey")

    drop constraint(:movie_reviews, "movie_reviews_movie_id_fkey")

    drop constraint(:movie_reviews, "movie_reviews_movie_log_id_fkey")

    drop_if_exists index(:movie_reviews, [:user_id, :movie_id])

    drop table(:movie_reviews)

    drop constraint(:tv_show_reviews, "tv_show_reviews_user_id_fkey")

    drop constraint(:tv_show_reviews, "tv_show_reviews_tv_show_id_fkey")

    drop constraint(:tv_show_reviews, "tv_show_reviews_tv_show_log_id_fkey")

    drop_if_exists index(:tv_show_reviews, [:user_id, :tv_show_id])

    drop table(:tv_show_reviews)
  end
end
