defmodule Stackd.Repo.Migrations.AddRatingTables do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:tv_show_ratings, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :rating, :bigint

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "tv_show_ratings_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :tv_show_id,
          references(:tv_shows,
            column: :id,
            name: "tv_show_ratings_tv_show_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:tv_show_ratings, [:user_id, :tv_show_id],
             name: "tv_show_ratings_unique_user_tv_show_index"
           )

    create table(:movie_ratings, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :rating, :bigint

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "movie_ratings_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :movie_id,
          references(:movies,
            column: :id,
            name: "movie_ratings_movie_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:movie_ratings, [:user_id, :movie_id],
             name: "movie_ratings_unique_user_movie_index"
           )

    create table(:game_ratings, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :rating, :bigint

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "game_ratings_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :game_id,
          references(:games,
            column: :id,
            name: "game_ratings_game_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:game_ratings, [:user_id, :game_id],
             name: "game_ratings_unique_user_game_index"
           )

    create table(:album_ratings, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :rating, :bigint

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :user_id,
          references(:users,
            column: :id,
            name: "album_ratings_user_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false

      add :album_id,
          references(:albums,
            column: :id,
            name: "album_ratings_album_id_fkey",
            type: :uuid,
            prefix: "public",
            on_delete: :delete_all
          ),
          null: false
    end

    create unique_index(:album_ratings, [:user_id, :album_id],
             name: "album_ratings_unique_user_album_index"
           )
  end

  def down do
    drop_if_exists unique_index(:album_ratings, [:user_id, :album_id],
                     name: "album_ratings_unique_user_album_index"
                   )

    drop constraint(:album_ratings, "album_ratings_user_id_fkey")

    drop constraint(:album_ratings, "album_ratings_album_id_fkey")

    drop table(:album_ratings)

    drop_if_exists unique_index(:game_ratings, [:user_id, :game_id],
                     name: "game_ratings_unique_user_game_index"
                   )

    drop constraint(:game_ratings, "game_ratings_user_id_fkey")

    drop constraint(:game_ratings, "game_ratings_game_id_fkey")

    drop table(:game_ratings)

    drop_if_exists unique_index(:movie_ratings, [:user_id, :movie_id],
                     name: "movie_ratings_unique_user_movie_index"
                   )

    drop constraint(:movie_ratings, "movie_ratings_user_id_fkey")

    drop constraint(:movie_ratings, "movie_ratings_movie_id_fkey")

    drop table(:movie_ratings)

    drop_if_exists unique_index(:tv_show_ratings, [:user_id, :tv_show_id],
                     name: "tv_show_ratings_unique_user_tv_show_index"
                   )

    drop constraint(:tv_show_ratings, "tv_show_ratings_user_id_fkey")

    drop constraint(:tv_show_ratings, "tv_show_ratings_tv_show_id_fkey")

    drop table(:tv_show_ratings)
  end
end
